// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (chat_uid, type, content, send_at, changed_at, is_deleted) 
	VALUES ($1, $2, $3, $4, $5, $6) RETURNING id
`

type CreateMessageParams struct {
	ChatUid   uuid.UUID
	Type      string
	Content   string
	SendAt    time.Time
	ChangedAt time.Time
	IsDeleted bool
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (int64, error) {
	row := q.db.QueryRow(ctx, createMessage,
		arg.ChatUid,
		arg.Type,
		arg.Content,
		arg.SendAt,
		arg.ChangedAt,
		arg.IsDeleted,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteMessage = `-- name: DeleteMessage :exec
UPDATE messages SET is_deleted = true WHERE id = $1
`

func (q *Queries) DeleteMessage(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteMessage, id)
	return err
}

const getMessage = `-- name: GetMessage :one
SELECT id, chat_uid, type, content, send_at, changed_at, is_deleted FROM messages
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMessage(ctx context.Context, id int64) (Message, error) {
	row := q.db.QueryRow(ctx, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ChatUid,
		&i.Type,
		&i.Content,
		&i.SendAt,
		&i.ChangedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getMessagesAfterDate = `-- name: GetMessagesAfterDate :many
SELECT id, chat_uid, type, content, send_at, changed_at, is_deleted FROM messages 
WHERE chat_uid = $1 AND changed_at > $2
`

type GetMessagesAfterDateParams struct {
	ChatUid   uuid.UUID
	ChangedAt time.Time
}

func (q *Queries) GetMessagesAfterDate(ctx context.Context, arg GetMessagesAfterDateParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessagesAfterDate, arg.ChatUid, arg.ChangedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ChatUid,
			&i.Type,
			&i.Content,
			&i.SendAt,
			&i.ChangedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesBeforeId = `-- name: GetMessagesBeforeId :many
SELECT id, chat_uid, type, content, send_at, changed_at, is_deleted FROM messages 
WHERE chat_uid = $1 AND id < $2 LIMIT 10
`

type GetMessagesBeforeIdParams struct {
	ChatUid uuid.UUID
	ID      int64
}

func (q *Queries) GetMessagesBeforeId(ctx context.Context, arg GetMessagesBeforeIdParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessagesBeforeId, arg.ChatUid, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ChatUid,
			&i.Type,
			&i.Content,
			&i.SendAt,
			&i.ChangedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const notifyMessageChange = `-- name: NotifyMessageChange :exec
SELECT pg_notify('message', $1)
`

func (q *Queries) NotifyMessageChange(ctx context.Context, msgID string) error {
	_, err := q.db.Exec(ctx, notifyMessageChange, msgID)
	return err
}
